<div class="calendar-container">
    <!-- Calendar Header -->
    <div class="calendar-header mb-4">
        <div class="row align-items-center">
            <div class="col-md-6">
                <h4 class="mb-0">
                    <i class="fas fa-calendar-alt"></i> 
                    Lịch huấn luyện - <span id="current-month-year"></span>
                </h4>
            </div>
            <div class="col-md-6 text-right">
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-primary" id="prev-month">
                        <i class="fas fa-chevron-left"></i> Tháng trước
                    </button>
                    <button type="button" class="btn btn-outline-primary" id="next-month">
                        Tháng sau <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Calendar Grid -->
    <div class="calendar-grid">
        <div class="calendar-weekdays">
            <div class="weekday">Thứ 2</div>
            <div class="weekday">Thứ 3</div>
            <div class="weekday">Thứ 4</div>
            <div class="weekday">Thứ 5</div>
            <div class="weekday">Thứ 6</div>
            <div class="weekday">Thứ 7</div>
            <div class="weekday">Chủ nhật</div>
        </div>
        
        <div class="calendar-days" id="calendar-days">
            <!-- Calendar days will be generated by JavaScript -->
        </div>
    </div>

    <!-- Legend -->
    <div class="calendar-legend mt-3">
        <div class="row">
            <div class="col-md-12">
                <div class="legend-item">
                    <span class="legend-color" style="background-color: #28a745;"></span>
                    <span>Có lịch huấn luyện</span>
                </div>
                <div class="legend-item">
                    <span class="legend-color" style="background-color: #ffc107;"></span>
                    <span>Lịch huấn luyện hôm nay</span>
                </div>
                <div class="legend-item">
                    <span class="legend-color" style="background-color: #6c757d;"></span>
                    <span>Ngày khác tháng</span>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Schedule Detail Modal -->
<div class="modal fade" id="scheduleModal" tabindex="-1" role="dialog" aria-labelledby="scheduleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title d-flex align-items-center gap-2" id="scheduleModalLabel">
                    <i class="fas fa-calendar-day"></i> 
                    Lịch huấn luyện ngày <span id="modal-date"></span>
                    <span id="modal-class-count" class="badge bg-success"></span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="schedule-list">
                    <!-- Schedule items will be loaded here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <form id="prefillDateForm" method="POST" action="{{ route('teaching_schedule.prefill_date') }}" class="d-inline">
                    @csrf
                    <input type="hidden" name="date" id="prefillDateInput">
                    <button type="submit" class="btn btn-success" id="addScheduleBtn">
                    <i class="fas fa-plus"></i> Thêm lịch huấn luyện
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Class Shifts Modal -->
<div class="modal fade" id="scheduleClassModal" tabindex="-1" role="dialog" aria-labelledby="scheduleClassModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title d-flex align-items-center gap-2" id="scheduleClassModalLabel">
                    <i class="fas fa-users"></i>
                    <span>Ca học của lớp</span>
                    <span id="classModalName" class="fw-bold"></span>
                    <span id="classModalCount" class="badge bg-primary ms-2"></span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body class-modal-body">
                <form id="classShiftsForm">
                    <div id="classShiftsList" class="class-shifts-grid"></div>
                </form>
    <!-- Reusable hidden form for posting prefill data -->
    <form id="prefillClassShiftForm" method="POST" action="{{ route('teaching_schedule.prefill_date') }}" class="d-none">
        <input type="hidden" name="_token" value="{{ csrf_token() }}">
        <input type="hidden" name="date" id="prefillDateField">
        <input type="hidden" name="class_id" id="prefillClassField">
        <input type="hidden" name="subject_id" id="prefillSubjectField">
        <input type="hidden" name="shift_name" id="prefillShiftField">
    </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

<style>
.calendar-container {
    background: #fff;
    border-radius: 12px;
    padding: 24px;
    box-shadow: 0 10px 24px rgba(0,0,0,0.08);
}

.calendar-header {
    border-bottom: 2px solid #e9ecef;
    padding-bottom: 15px;
}

.calendar-grid {
    margin-top: 24px;
}

.calendar-weekdays {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 6px;
    margin-bottom: 12px;
}

.weekday {
    background: #f8f9fa;
    padding: 10px 6px;
    text-align: center;
    font-weight: 700;
    color: #495057;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    font-size: 13px;
    letter-spacing: .2px;
}

.calendar-days {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 6px;
}

.calendar-day {
    min-height: 150px;
    padding: 14px;
    border: 1px solid #e9ecef;
    background: #fff;
    border-radius: 10px;
    cursor: pointer;
    transition: transform .18s ease, box-shadow .18s ease, background .18s ease;
    position: relative;
}

.calendar-day:hover {
    background: #f8f9fa;
    transform: translateY(-2px);
    box-shadow: 0 8px 16px rgba(0,0,0,0.06);
}

.calendar-day.other-month {
    background: #fafbfc;
    color: #6c757d;
}

.calendar-day.today {
    background: #fff8e1;
    border: 2px solid #ffc107;
}

.calendar-day.has-schedule {
    background: #eaf7ee;
    border-left: 4px solid #28a745;
}

.calendar-day.today.has-schedule {
    background: #fff3cd;
    border: 2px solid #ffc107;
    border-left: 4px solid #28a745;
}

.day-number {
    font-weight: 700;
    font-size: 16px;
    margin-bottom: 8px;
}

.schedule-count {
    position: absolute;
    top: 6px;
    right: 6px;
    background: #28a745;
    color: #fff;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 10px;
    font-weight: 700;
    box-shadow: 0 2px 6px rgba(40,167,69,.25);
}

.schedule-preview {
    font-size: 12px;
    color: #495057;
    margin-top: 6px;
    max-height: 40px;
    overflow: hidden;
    line-height: 1.3;
}

.schedule-tags {
    margin-top: 8px;
    display: grid;
    grid-template-columns: 1fr;
    gap: 6px;
}
.class-chip {
    display: flex;
    align-items: center;
    gap: 8px;
    background: #f1f3ff;
    color: #0d6efd;
    border: 1px solid #d6e2ff;
    border-radius: 10px;
    padding: 6px 10px;
    font-size: 12px;
    font-weight: 600;
    max-width: 100%;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}
.class-chip i { font-size: 12px; }
.schedule-more { font-size: 12px; color: #6c757d; }
.schedule-tag--stacked { padding: 6px 8px; }
.schedule-tag--stacked .tag-row { display: flex; align-items: center; justify-content: space-between; }
.schedule-tag--stacked .tag-class { font-weight: 700; color: #0d6efd; }
.tag-row--shifts { color: #0b5ed7; font-size: 10px; margin-top: 4px; }
.schedule-more {
    font-size: 11px;
    color: #6c757d;
}

.schedule-item {
    background: #fff;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    padding: 10px;
    margin-bottom: 10px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.schedule-item:last-child {
    margin-bottom: 0;
}

.schedule-time {
    font-weight: bold;
    color: #007bff;
    font-size: 12px;
}

.schedule-class {
    font-weight: bold;
    color: #495057;
    margin: 5px 0;
}

.schedule-subject {
    color: #6c757d;
    font-size: 14px;
    margin-bottom: 5px;
}

.schedule-teacher {
    color: #28a745;
    font-size: 14px;
    font-style: italic;
}

.schedule-room {
    color: #6c757d;
    font-size: 14px;
}

.schedule-shift {
    color: #17a2b8;
    font-size: 14px;
    font-weight: bold;
}

.calendar-legend {
    border-top: 1px solid #dee2e6;
    padding-top: 15px;
}

.legend-item {
    display: inline-block;
    margin-right: 20px;
    font-size: 12px;
}

.legend-color {
    display: inline-block;
    width: 12px;
    height: 12px;
    border-radius: 2px;
    margin-right: 5px;
    vertical-align: middle;
}

/* Scoped darker backdrop only when class detail modal is open */
body.class-modal-open .modal-backdrop { background-color: #000; }
body.class-modal-open .modal-backdrop.show { opacity: .5; }
body.class-modal-open .modal-backdrop + .modal-backdrop { opacity: .6; }
/* Ensure modals stack above backdrops */
.modal { z-index: 1055; }
#scheduleClassModal { z-index: 1060; }

/* Dim the day modal when class modal is open */
.modal.dimmed .modal-content { position: relative; }
/* remove dimming overlay entirely */
.modal.dimmed .modal-content::after { display: none; }

/* Class list styling inside modal */
.class-list {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 12px;
}

.class-card {
    background: #ffffff;
    border: 1px solid #e9ecef;
    border-radius: 10px;
    padding: 12px;
    box-shadow: 0 4px 10px rgba(0,0,0,0.05);
    transition: transform .15s ease, box-shadow .15s ease;
}

.class-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 16px rgba(0,0,0,0.08);
}

.class-card-header .fw-semibold {
    font-size: 15px;
}

.shift-chips {
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
    justify-content: flex-end;
}

.shift-chip {
    display: inline-flex;
    align-items: center;
    gap: 6px;
    background: #f1f8ff;
    color: #0d6efd;
    border: 1px solid #d6e9ff;
    border-radius: 999px;
    padding: 2px 8px;
    font-size: 11px;
    line-height: 1.2;
}

.shift-chip i {
        font-size: 10px;
    }
    
.class-card-actions .btn {
    padding: 3px 8px;
}

.class-card-details .schedule-item {
    border-left: 3px solid #0d6efd;
}

/* Class modal: larger, calendar-like shift cards */
.class-modal-body {
    background: #f8f9fb;
}

.class-shifts-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 16px;
}

.shift-card {
    background: #ffffff;
    border: 1px solid #e9ecef;
    border-radius: 12px;
    padding: 16px 18px;
    box-shadow: 0 8px 20px rgba(0,0,0,0.07);
}

.shift-card .shift-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 8px;
}

.shift-title {
    font-weight: 700;
    color: #0d6efd;
    font-size: 16px;
}

.shift-badge {
    background: #e7f1ff;
    color: #0b5ed7;
    border: 1px solid #cfe2ff;
    border-radius: 999px;
    padding: 2px 10px;
    font-size: 12px;
    font-weight: 600;
}

.shift-meta { color: #495057; font-size: 13px; }
.shift-meta i { color: #ADB5BD; }

.shift-actions { margin-top: 12px; }
.shift-actions .btn { padding: 4px 10px; }

@media (max-width: 992px) {
    .class-shifts-grid { grid-template-columns: repeat(2, 1fr); }
}
@media (max-width: 576px) {
    .class-shifts-grid { grid-template-columns: 1fr; }
}

@media (max-width: 768px) {
    .calendar-day {
        min-height: 120px;
        padding: 10px;
    }
    .day-number { font-size: 15px; }
    .schedule-preview { font-size: 12px; max-height: 40px; }
    .weekday { padding: 8px 6px; font-size: 12px; }
    .class-list { grid-template-columns: 1fr; }
}
</style>

<!-- Embedded schedule data to avoid Blade inside JS context -->
<script id="scheduleDataJson" type="application/json">{!! json_encode($getAllTeachingSchedule ?? []) !!}</script>

<script>
function closeModal() {
        const modal = $('#scheduleModal');
        modal.modal('hide'); 
}
document.addEventListener('DOMContentLoaded', function() {
    let currentDate = new Date();
    let currentMonth = currentDate.getMonth();
    let currentYear = currentDate.getFullYear();
    
    // Schedule data from server (parsed from embedded JSON)
    var scheduleDataEl = document.getElementById('scheduleDataJson');
    let scheduleData = [];
    // No total shift limiter – revert to previous behavior
    try {
        if (scheduleDataEl && scheduleDataEl.textContent) {
            scheduleData = JSON.parse(scheduleDataEl.textContent);
        }
    } catch (e) {
        scheduleData = [];
    }
    
    // Initialize calendar
    function initCalendar() {
        updateMonthYear();
        generateCalendar();
        // If redirected after save with a date, re-open that day modal
        try {
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('saved') === '1' && urlParams.get('date')) {
                const savedDate = new Date(urlParams.get('date'));
                if (!isNaN(savedDate.getTime())) {
                    // Ensure calendar is on the right month/year
                    currentMonth = savedDate.getMonth();
                    currentYear = savedDate.getFullYear();
                    updateMonthYear();
                    generateCalendar();
                    // Build schedules for that date and open modal
                    const dateStr = savedDate.getFullYear() + '-' + String(savedDate.getMonth()+1).padStart(2,'0') + '-' + String(savedDate.getDate()).padStart(2,'0');
                    const daySchedules = scheduleData.filter(s => s.schedule_date === dateStr);
                    showScheduleModal(savedDate, daySchedules);
                }
            }
        } catch (_) {}
    }
    
    // Update month/year display
    function updateMonthYear() {
        const monthNames = [
            'Tháng 1', 'Tháng 2', 'Tháng 3', 'Tháng 4', 'Tháng 5', 'Tháng 6',
            'Tháng 7', 'Tháng 8', 'Tháng 9', 'Tháng 10', 'Tháng 11', 'Tháng 12'
        ];
        document.getElementById('current-month-year').textContent = 
            monthNames[currentMonth] + ' ' + currentYear;
    }
    
    // Generate calendar grid
    function generateCalendar() {
        const calendarDays = document.getElementById('calendar-days');
        if (!calendarDays) {
            return;
        }
        calendarDays.innerHTML = '';
        
        const firstDay = new Date(currentYear, currentMonth, 1);
        const lastDay = new Date(currentYear, currentMonth + 1, 0);
        const startDate = new Date(firstDay);
        startDate.setDate(startDate.getDate() - firstDay.getDay() + 1); // Start from Monday
        
        const today = new Date();
        const isToday = (date) => {
            return date.toDateString() === today.toDateString();
        };
        
        const isCurrentMonth = (date) => {
            return date.getMonth() === currentMonth && date.getFullYear() === currentYear;
        };
        
        // Generate 42 days (6 weeks)
        for (let i = 0; i < 42; i++) {
            const date = new Date(startDate);
            date.setDate(startDate.getDate() + i);
            
            const dayElement = document.createElement('div');
            dayElement.className = 'calendar-day';
            
            // Add classes based on date properties
            if (!isCurrentMonth(date)) {
                dayElement.classList.add('other-month');
            }
            if (isToday(date)) {
                dayElement.classList.add('today');
            }
            
            // Check for schedules on this date - sử dụng format YYYY-MM-DD trực tiếp
            const dateStr = date.getFullYear() + '-' + 
                String(date.getMonth() + 1).padStart(2, '0') + '-' + 
                String(date.getDate()).padStart(2, '0');
            
            const daySchedules = scheduleData.filter(schedule => {
                if (!schedule.schedule_date) return false;
                // So sánh trực tiếp string YYYY-MM-DD
                return schedule.schedule_date === dateStr;
            });
            // Count unique classes for this day
            const uniqueClassCount = (() => {
                const set = new Set();
                daySchedules.forEach(s => { if (s.class_name) set.add(s.class_name); });
                return set.size;
            })();
            
            if (daySchedules.length > 0) {
                dayElement.classList.add('has-schedule');
            }
            
            // Day number
            const dayNumber = document.createElement('div');
            dayNumber.className = 'day-number';
            dayNumber.textContent = date.getDate();
            dayElement.appendChild(dayNumber);
            
            // Schedule count badge (show number of classes with shifts)
            if (daySchedules.length > 0) {
                const countBadge = document.createElement('div');
                countBadge.className = 'schedule-count';
                countBadge.textContent = uniqueClassCount;
                dayElement.appendChild(countBadge);
            }
            
            // Show class chips (no shifts) - grouped by class
            if (daySchedules.length > 0) {
                // Group shifts by class
                const classMap = new Map();
                daySchedules.forEach(s => {
                    const cls = s.class_name || 'Lớp';
                    if (!classMap.has(cls)) classMap.set(cls, true);
                });

                const tags = document.createElement('div');
                tags.className = 'schedule-tags';
                const entries = Array.from(classMap.keys());
                const maxClasses = 3;
                entries.slice(0, maxClasses).forEach((cls) => {
                    const chip = document.createElement('div');
                    chip.className = 'class-chip';
                    const clsShort = cls.length > 18 ? (cls.slice(0, 18) + '…') : cls;
                    chip.innerHTML = `<i class="fas fa-users"></i><span title="${cls}">${clsShort}</span>`;
                    tags.appendChild(chip);
                });
                if (entries.length > maxClasses) {
                    const more = document.createElement('div');
                    more.className = 'schedule-more';
                    more.textContent = `+${entries.length - maxClasses} lớp còn lại`;
                    tags.appendChild(more);
                }
                dayElement.appendChild(tags);
            }
            
            // Click event
            dayElement.addEventListener('click', function() {
                showScheduleModal(date, daySchedules);
            });
            
            calendarDays.appendChild(dayElement);
        }
    }
    
    // Robust close handlers for schedule modal (fallback if BS events fail)
    (function attachScheduleModalCloseHandlers(){
        const modalEl = document.getElementById('scheduleModal');
        if (!modalEl) return;
        function forceHide() {
            try {
                if (window.bootstrap) {
                    const inst = bootstrap.Modal.getInstance(modalEl) || new bootstrap.Modal(modalEl);
                    inst.hide();
                }
            } catch (_) {}
            // Hard cleanup fallback
            modalEl.classList.remove('show');
            modalEl.style.display = 'none';
            document.body.classList.remove('modal-open');
            const backdrops = document.querySelectorAll('.modal-backdrop');
            backdrops.forEach(b => b.remove());
        }
        function smoothHide() {
            let closed = false;
            try {
                if (window.bootstrap) {
                    const inst = bootstrap.Modal.getInstance(modalEl) || new bootstrap.Modal(modalEl);
                    inst.hide();
                }
            } catch (_) {}
            // After a short delay, if modal still visible, force hide
            setTimeout(() => {
                if (modalEl.classList.contains('show') || modalEl.style.display === 'block') {
                    forceHide();
                }
            }, 50);
        }
        modalEl.querySelectorAll('[data-bs-dismiss="modal"], .btn-close').forEach(btn => {
            btn.addEventListener('click', function(e){
                e.preventDefault();
                e.stopPropagation();
                smoothHide();
            });
        });
        document.addEventListener('keydown', function(e){
            if (e.key === 'Escape') smoothHide();
        });
    })();
    
    // Show schedule modal
    function showScheduleModal(date, schedules) {
        const modal = document.getElementById('scheduleModal');
        const modalDate = document.getElementById('modal-date');
        const scheduleList = document.getElementById('schedule-list');
        const addBtn = document.getElementById('addScheduleBtn');
        const prefillInput = document.getElementById('prefillDateInput');
        
        // Format date for display
        const dateStr = date.toLocaleDateString('vi-VN', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
        modalDate.textContent = dateStr;
        // ISO date for prefill
        const isoDate = date.getFullYear() + '-' + String(date.getMonth()+1).padStart(2,'0') + '-' + String(date.getDate()).padStart(2,'0');
        if (prefillInput) prefillInput.value = isoDate;
        
        // Clear previous content and reset class count badge
        scheduleList.innerHTML = '';
        const classCountBadge = document.getElementById('modal-class-count');
        if (classCountBadge) {
            const uniqueCount = new Set(schedules.map(s => s.class_name)).size;
            if (uniqueCount > 0) {
                classCountBadge.textContent = `${uniqueCount} lớp`;
                classCountBadge.classList.remove('d-none');
            } else {
                classCountBadge.textContent = '';
                classCountBadge.classList.add('d-none');
            }
        }
        
        if (schedules.length === 0) {
            scheduleList.innerHTML = `
                <div class="text-center text-muted py-4">
                    <i class="fas fa-calendar-times fa-3x mb-3"></i>
                    <p>Không có lịch huấn luyện nào trong ngày này</p>
                </div>
            `;
        } else {
            // Nhóm lịch theo lớp để hiển thị danh sách lớp trước (support nhiều lớp)
            const classMap = new Map();
            schedules.forEach(s => {
                const cls = s.class_name || 'Lớp';
                if (!classMap.has(cls)) classMap.set(cls, []);
                classMap.get(cls).push(s);
            });

            // Tạo thanh tìm kiếm lớp
            const searchWrap = document.createElement('div');
            searchWrap.className = 'mb-3';
            searchWrap.innerHTML = `
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="text" class="form-control" id="classSearchInput" placeholder="Tìm lớp...">
                </div>`;
            scheduleList.appendChild(searchWrap);

            // badge was already set above

            const list = document.createElement('div');
            list.className = 'class-list';
            scheduleList.appendChild(list);

            const entries = Array.from(classMap.entries()).sort((a,b)=> a[0].localeCompare(b[0]));
            const pageSize = 12;
            let shown = 0;

            function renderChunk(reset=false) {
                if (reset) { list.innerHTML=''; shown = 0; }
                const slice = entries.slice(shown, shown + pageSize);
                slice.forEach(([cls, items]) => {
                    const classCard = document.createElement('div');
                    classCard.className = 'class-card';
                    const shifts = [...new Set(items.map(it => it.shift_name || ((it.start_time||'').slice(0,5)+'-'+(it.end_time||'').slice(0,5))))];
                    const shiftChips = shifts.slice(0, 3).map(s => `<span class="shift-chip" title="${s}"><i class=\"fas fa-clock\"></i> ${s}</span>`).join('') + (shifts.length > 3 ? `<span class=\"shift-chip\">+${shifts.length - 3}</span>` : '');
                    classCard.innerHTML = `
                        <div class="class-card-header d-flex justify-content-between align-items-center">
                            <div class="fw-semibold"><i class="fas fa-users me-2"></i>${cls}</div>
                            <div class="shift-chips">${shiftChips}</div>
                    </div>
                        <div class="class-card-actions mt-2">
                            <button type="button" class="btn btn-sm btn-outline-primary btn-view-details">
                                <i class="fas fa-eye"></i> Xem chi tiết
                            </button>
                    </div>
                        <div class="class-card-details mt-2" style="display:none;"></div>`;

                    classCard.querySelector('.btn-view-details').addEventListener('click', function() {
                        openClassModal(cls, items);
                    });

                    list.appendChild(classCard);
                });
                shown += slice.length;
                loadMoreBtn.style.display = shown < entries.length ? '' : 'none';
            }

            const loadMoreBtn = document.createElement('button');
            loadMoreBtn.type = 'button';
            loadMoreBtn.className = 'btn btn-outline-secondary w-100 mt-3';
            loadMoreBtn.textContent = 'Hiển thị thêm';
            loadMoreBtn.addEventListener('click', function(){ renderChunk(); });
            scheduleList.appendChild(loadMoreBtn);

            // Tìm kiếm lớp theo tên
            const searchInput = document.getElementById('classSearchInput');
            searchInput.addEventListener('input', function(){
                const q = this.value.trim().toLowerCase();
                if (!q) {
                    // reset
                    renderChunk(true);
                    renderChunk();
                    return;
                }
                list.innerHTML='';
                const filtered = entries.filter(([cls]) => cls.toLowerCase().includes(q));
                filtered.slice(0, pageSize).forEach(([cls, items]) => {
                    const classCard = document.createElement('div');
                    classCard.className = 'class-card';
                    const shifts = [...new Set(items.map(it => it.shift_name || ((it.start_time||'').slice(0,5)+'-'+(it.end_time||'').slice(0,5))))];
                    const shiftChips = shifts.slice(0, 3).map(s => `<span class=\"shift-chip\" title=\"${s}\"><i class=\"fas fa-clock\"></i> ${s}</span>`).join('') + (shifts.length > 3 ? `<span class=\"shift-chip\">+${shifts.length - 3}</span>` : '');
                    classCard.innerHTML = `
                        <div class="class-card-header d-flex justify-content-between align-items-center">
                            <div class="fw-semibold"><i class="fas fa-users me-2"></i>${cls}</div>
                            <div class="shift-chips">${shiftChips}</div>
                    </div>
                        <div class="class-card-actions mt-2">
                            <button type="button" class="btn btn-sm btn-outline-primary btn-view-details">
                                <i class="fas fa-eye"></i> Xem chi tiết
                            </button>
                    </div>
                        <div class="class-card-details mt-2" style="display:none;"></div>`;
                    classCard.querySelector('.btn-view-details').addEventListener('click', function() {
                        openClassModal(cls, classMap.get(cls));
                    });
                    list.appendChild(classCard);
                });
                loadMoreBtn.style.display = 'none';
            });

            // Render trang đầu
            renderChunk(true);
            renderChunk();
        }
        
        // Show modal using Bootstrap 5
        const dayModalEl = document.getElementById('scheduleModal');
        if (dayModalEl) dayModalEl.classList.remove('dimmed');
        document.body.classList.remove('class-modal-open');
        const modalInstance = new bootstrap.Modal(dayModalEl, {keyboard: true, backdrop: true});
        modalInstance.show();
    }
    
    // Open class modal with full shift list
    function openClassModal(className, items) {
        const modal = document.getElementById('scheduleClassModal');
        const nameEl = document.getElementById('classModalName');
        const countEl = document.getElementById('classModalCount');
        const listEl = document.getElementById('classShiftsList');
        if (!modal || !nameEl || !listEl) return;

        nameEl.textContent = className || '';
        if (countEl) countEl.textContent = `${items.length} ca`;

        // determine existing shift numbers for this class
        const shiftNums = (function(){
            const arr = items.map(function(it){
                var m = (it.shift_name || '').toString().match(/\d+/);
                return m ? parseInt(m[0], 10) : null;
            }).filter(function(n){ return n !== null && !isNaN(n); });
            arr.sort(function(a,b){ return a-b; });
            // unique
            return arr.filter(function(v,i,self){ return i===0 || v!==self[i-1]; });
        })();
        var hasReachedLimit = false;

        var classItemsCount = items.length;
        listEl.innerHTML = items.map(schedule => {
            const startTime = schedule.start_time || '';
            const endTime = schedule.end_time || '';
            const subjectName = schedule.subject_name || 'N/A';
            const teacherName = schedule.teacher_name || 'Chưa xác định';
            const roomName = schedule.room_name || 'N/A';
            const shiftName = schedule.shift_name || 'N/A';
            return `
                <div class="shift-card">
                    <div class="shift-header">
                        <div class="shift-title"><i class="fas fa-clock me-2"></i>${startTime} - ${endTime}</div>
                        <div class="shift-badge">${shiftName}</div>
                    </div>
                    <div class="shift-meta mb-1"><i class="fas fa-book me-2"></i>${subjectName}</div>
                    <div class="shift-meta mb-1"><i class="fas fa-chalkboard-teacher me-2"></i>${teacherName}</div>
                    <div class="shift-meta"><i class="fas fa-door-open me-2"></i>Phòng: ${roomName}</div>
                    <div class="shift-actions d-flex flex-wrap gap-2">
                        <a href="/wp-admin/teaching_schedule/edit/${schedule.id}" class="btn btn-sm btn-warning"><i class="fas fa-edit"></i> Sửa</a>
                        <button type="button" class="btn btn-sm btn-danger btn-delete-shift" data-delete-url="/wp-admin/teaching_schedule/delete/${schedule.id}" data-shift-id="${schedule.id}" data-class-count="${classItemsCount}"><i class="fas fa-trash"></i> Xóa</button>
                        <button type="button" class="btn btn-sm btn-success btn-prefill-add" data-date="${schedule.schedule_date || ''}" data-class="${schedule.class_id || ''}" data-subject="${schedule.subject_id || ''}" data-shift="${schedule.shift_name || ''}"><i class="fas fa-plus"></i> Thêm ca</button>
                    </div>
                </div>`;
        }).join('');

        const dayModalEl = document.getElementById('scheduleModal');
        const clearDim = () => {
            if (dayModalEl) dayModalEl.classList.remove('dimmed');
            document.body.classList.remove('class-modal-open');
        };
        // Do NOT dim the day modal; only use global backdrop while class modal is open
        document.body.classList.add('class-modal-open');

        const classModal = new bootstrap.Modal(modal, {keyboard: true, backdrop: true});
        // Wire prefill buttons to hidden form
        setTimeout(function(){
            var formEl = document.getElementById('prefillClassShiftForm');
            var dateEl = document.getElementById('prefillDateField');
            var classEl = document.getElementById('prefillClassField');
            var subjEl = document.getElementById('prefillSubjectField');
            var shiftEl = document.getElementById('prefillShiftField');
            if (!formEl || !dateEl || !classEl || !subjEl || !shiftEl) return;
            modal.querySelectorAll('.btn-prefill-add').forEach(function(btn){
                btn.addEventListener('click', function(){
                    dateEl.value = this.getAttribute('data-date') || '';
                    classEl.value = this.getAttribute('data-class') || '';
                    subjEl.value = this.getAttribute('data-subject') || '';
                    shiftEl.value = this.getAttribute('data-shift') || '';
                    formEl.submit();
                });
            });

            // AJAX delete without page reload
            modal.querySelectorAll('.btn-delete-shift').forEach(function(btn){
                btn.addEventListener('click', function(){
                    var url = this.getAttribute('data-delete-url');
                    var shiftId = parseInt(this.getAttribute('data-shift-id'), 10);
                    var classCount = parseInt(this.getAttribute('data-class-count') || '0', 10);
                    if (!url || isNaN(shiftId)) return;
                    if (!confirm('Bạn có chắc chắn muốn xóa lịch huấn luyện này?')) return;
                    var card = this.closest('.shift-card');
                    fetch(url, { method: 'GET', headers: { 'X-Requested-With': 'XMLHttpRequest' } })
                        .then(function(){
                            // Optimistically remove from UI
                            if (card) card.remove();
                            // Update count badge
                            var countEl = document.getElementById('classModalCount');
                            if (countEl) {
                                var current = parseInt((countEl.textContent || '0').replace(/\D/g,''), 10) || 0;
                                if (current > 0) countEl.textContent = (current - 1) + ' ca';
                            }
                            // Update in-memory scheduleData and calendar cells later
                            if (Array.isArray(scheduleData)) {
                                scheduleData = scheduleData.filter(function(s){ return s.id !== shiftId; });
                            }
                            // If this class originally had only one shift, reload page to fully reset view
                            if (classCount === 1) {
                                window.location.reload();
                            }
                        })
                        .catch(function(){
                            // fallback: refresh modal list via global calendar refresh
                            if (typeof window.refreshCalendarData === 'function') {
                                window.refreshCalendarData();
                            }
                        });
                });
            });
        }, 0);
        // Close handlers: header X, footer Close, click backdrop, ESC
        const closeBtns = modal.querySelectorAll('[data-bs-dismiss="modal"], .btn-close');
        closeBtns.forEach(btn => {
            btn.addEventListener('click', function(e){
                e.preventDefault();
                try { classModal.hide(); } catch(_) {}
            });
        });
        document.addEventListener('keydown', function onEsc(e){
            if (e.key === 'Escape' && modal.classList.contains('show')) {
                try { classModal.hide(); } catch(_) {}
                document.removeEventListener('keydown', onEsc);
            }
        });
        // Ensure cleanup on all close paths
        modal.addEventListener('hide.bs.modal', clearDim);
        modal.addEventListener('hidden.bs.modal', clearDim);
        // Global safeguard: if any modal hides and class modal isn't visible, clear dim
        document.addEventListener('hidden.bs.modal', function onAnyHidden(){
            const classModalEl = document.getElementById('scheduleClassModal');
            const isClassOpen = classModalEl && classModalEl.classList.contains('show');
            if (!isClassOpen) {
                clearDim();
                document.removeEventListener('hidden.bs.modal', onAnyHidden);
            }
        });
        // Fallback cleanup in case BS events fail
        setTimeout(() => {
            const stillOpen = modal.classList.contains('show');
            if (!stillOpen) clearDim();
        }, 400);
        classModal.show();
    }
    
    // Navigation buttons
    document.getElementById('prev-month').addEventListener('click', function() {
        currentMonth--;
        if (currentMonth < 0) {
            currentMonth = 11;
            currentYear--;
        }
        initCalendar();
    });
    
    document.getElementById('next-month').addEventListener('click', function() {
        currentMonth++;
        if (currentMonth > 11) {
            currentMonth = 0;
            currentYear++;
        }
        initCalendar();
    });
    
    
    // Initialize calendar
    initCalendar();
    
    // Global function to update calendar (for AJAX calls)
    window.updateCalendar = function() {
        // Simple approach: reload the page to get fresh data
        window.location.reload();
    };
    
    // Alternative: Update calendar data without reload
    window.refreshCalendarData = function() {
        // Reload schedule data from server
        fetch('{{ route("teaching_schedule.index") }}?ajax=1', {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.schedules) {
                // Update schedule data
                scheduleData = data.schedules;
                // Regenerate calendar
                generateCalendar();
                
                // Show success message
                if (typeof toastr !== 'undefined') {
                    toastr.success('Lịch đã được cập nhật');
                }
            }
        })
        .catch(error => {
            console.error('Error updating calendar:', error);
            // Fallback to page reload
            window.location.reload();
        });
    };
});
</script>
