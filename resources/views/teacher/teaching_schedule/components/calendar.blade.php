<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<div class="calendar-container">
    <!-- Calendar Header -->
    <div class="calendar-header mb-4">
        <div class="row align-items-center">
            <div class="col-md-6">
                <h4 class="mb-0">
                    <i class="fas fa-calendar-alt"></i> 
                    Lịch huấn luyện - <span id="current-month-year"></span>
                </h4>
            </div>
            <div class="col-md-6 text-right">
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-primary" id="prev-month">
                        <i class="fas fa-chevron-left"></i> Tháng trước
                    </button>
                    <button type="button" class="btn btn-outline-primary" id="next-month">
                        Tháng sau <i class="fas fa-chevron-right"></i>
                    </button>
                    
                </div>
            </div>
        </div>
    </div>

    <!-- Calendar Grid -->
    <div class="calendar-grid">
        <div class="calendar-weekdays">
            <div class="weekday">Thứ 2</div>
            <div class="weekday">Thứ 3</div>
            <div class="weekday">Thứ 4</div>
            <div class="weekday">Thứ 5</div>
            <div class="weekday">Thứ 6</div>
            <div class="weekday">Thứ 7</div>
            <div class="weekday">Chủ nhật</div>
        </div>
        
        <div class="calendar-days" id="calendar-days">
            <!-- Calendar days will be generated by JavaScript -->
        </div>
    </div>

    <!-- Legend -->
    <div class="calendar-legend mt-3">
        <div class="row">
            <div class="col-md-12">
                <div class="legend-item">
                    <span class="legend-color" style="background-color: #28a745;"></span>
                    <span>Có lịch huấn luyện</span>
                </div>
                <div class="legend-item">
                    <span class="legend-color" style="background-color: #ffc107;"></span>
                    <span>Lịch huấn luyện hôm nay</span>
                </div>
                <div class="legend-item">
                    <span class="legend-color" style="background-color: #6c757d;"></span>
                    <span>Ngày khác tháng</span>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Schedule Detail Modal -->
<div class="modal fade" id="scheduleModal" tabindex="-1" role="dialog" aria-labelledby="scheduleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title d-flex align-items-center gap-2" id="scheduleModalLabel">
                    <i class="fas fa-calendar-day"></i> 
                    Lịch huấn luyện ngày <span id="modal-date"></span>
                    <span id="modal-class-count" class="badge bg-success"></span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="schedule-list">
                    <!-- Schedule items will be loaded here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

<!-- Class Shifts Modal -->
<div class="modal fade" id="scheduleClassModal" tabindex="-1" role="dialog" aria-labelledby="scheduleClassModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title d-flex align-items-center gap-2" id="scheduleClassModalLabel">
                    <i class="fas fa-users"></i>
                    <span>Ca học của lớp</span>
                    <span id="classModalName" class="fw-bold"></span>
                    <span id="classModalCount" class="badge bg-primary ms-2"></span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body class-modal-body">
                <form id="classShiftsForm">
                    <div id="classShiftsList" class="class-shifts-grid"></div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

<style>
.calendar-container {
    background: #fff;
    border-radius: 12px;
    padding: 24px;
    box-shadow: 0 10px 24px rgba(0,0,0,0.08);
}

.calendar-header {
    border-bottom: 2px solid #e9ecef;
    padding-bottom: 15px;
}

.calendar-grid {
    margin-top: 24px;
}

.calendar-weekdays {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 6px;
    margin-bottom: 12px;
}

.weekday {
    background: #f8f9fa;
    padding: 10px 6px;
    text-align: center;
    font-weight: 700;
    color: #495057;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    font-size: 13px;
    letter-spacing: .2px;
}

.calendar-days {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 6px;
}

.calendar-day {
    min-height: 150px;
    padding: 14px;
    border: 1px solid #e9ecef;
    background: #fff;
    border-radius: 10px;
    cursor: pointer;
    transition: transform .18s ease, box-shadow .18s ease, background .18s ease;
    position: relative;
}

.calendar-day:hover {
    background: #f8f9fa;
    transform: translateY(-2px);
    box-shadow: 0 8px 16px rgba(0,0,0,0.06);
}

.calendar-day.other-month {
    background: #fafbfc;
    color: #6c757d;
}

.calendar-day.today {
    background: #fff8e1;
    border: 2px solid #ffc107;
}

.calendar-day.has-schedule {
    background: #eaf7ee;
    border-left: 4px solid #28a745;
}

.calendar-day.today.has-schedule {
    background: #fff3cd;
    border: 2px solid #ffc107;
    border-left: 4px solid #28a745;
}

.day-number {
    font-weight: 700;
    font-size: 16px;
    margin-bottom: 8px;
}

.schedule-count {
    position: absolute;
    top: 6px;
    right: 6px;
    background: #28a745;
    color: #fff;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 10px;
    font-weight: 700;
    box-shadow: 0 2px 6px rgba(40,167,69,.25);
}

.schedule-preview {
    font-size: 12px;
    color: #495057;
    margin-top: 6px;
    max-height: 40px;
    overflow: hidden;
    line-height: 1.3;
}

.schedule-tags {
    margin-top: 8px;
    display: grid;
    grid-template-columns: 1fr;
    gap: 6px;
}
.class-chip {
    display: flex;
    align-items: center;
    gap: 8px;
    background: #f1f3ff;
    color: #0d6efd;
    border: 1px solid #d6e2ff;
    border-radius: 10px;
    padding: 6px 10px;
    font-size: 12px;
    font-weight: 600;
    max-width: 100%;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}
.class-chip i { font-size: 12px; }
.schedule-more { font-size: 12px; color: #6c757d; }

.schedule-item {
    background: #fff;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    padding: 10px;
    margin-bottom: 10px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.schedule-item:last-child {
    margin-bottom: 0;
}

.schedule-time {
    font-weight: bold;
    color: #007bff;
    font-size: 12px;
}

.schedule-class {
    font-weight: bold;
    color: #495057;
    margin: 5px 0;
}

.schedule-subject {
    color: #6c757d;
    font-size: 14px;
    margin-bottom: 5px;
}

.schedule-teacher {
    color: #28a745;
    font-size: 14px;
    font-style: italic;
}

.schedule-room {
    color: #6c757d;
    font-size: 14px;
}

.schedule-shift {
    color: #17a2b8;
    font-size: 14px;
    font-weight: bold;
}

.schedule-actions {
    margin-top: 10px;
    padding-top: 10px;
    border-top: 1px solid #f8f9fa;
}

/* Readonly class list styles (match admin) */
.class-list { display: grid; grid-template-columns: repeat(2, 1fr); gap: 12px; }
.class-card { background:#ffffff; border:1px solid #e9ecef; border-radius:10px; padding:12px; box-shadow:0 4px 10px rgba(0,0,0,0.05); transition: transform .15s ease, box-shadow .15s ease; }
.class-card:hover { transform: translateY(-2px); box-shadow: 0 8px 16px rgba(0,0,0,0.08); }
.class-card-header .fw-semibold { font-size: 15px; }
.shift-chips { display:flex; flex-wrap:wrap; gap:6px; justify-content:flex-end; }
.shift-chip { display:inline-flex; align-items:center; gap:6px; background:#f1f8ff; color:#0d6efd; border:1px solid #d6e9ff; border-radius:999px; padding:2px 8px; font-size:11px; line-height:1.2; }
.shift-chip i { font-size:10px; }
.class-card-actions .btn { padding:3px 8px; }
.class-card-details .schedule-item { border-left:3px solid #0d6efd; }

/* Class modal: larger, calendar-like shift cards */
.class-modal-body {
    background: #f8f9fb;
}

.class-shifts-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 16px;
}

.shift-card {
    background: #ffffff;
    border: 1px solid #e9ecef;
    border-radius: 12px;
    padding: 16px 18px;
    box-shadow: 0 8px 20px rgba(0,0,0,0.07);
}

.shift-card .shift-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 8px;
}

.shift-title {
    font-weight: 700;
    color: #0d6efd;
    font-size: 16px;
}

.shift-badge {
    background: #e7f1ff;
    color: #0b5ed7;
    border: 1px solid #cfe2ff;
    border-radius: 999px;
    padding: 2px 10px;
    font-size: 12px;
    font-weight: 600;
}

.shift-meta { color: #495057; font-size: 13px; }
.shift-meta i { color: #ADB5BD; }

.shift-actions { margin-top: 12px; }
.shift-actions .btn { padding: 4px 10px; }

@media (max-width: 992px) {
    .class-shifts-grid { grid-template-columns: repeat(2, 1fr); }
}
@media (max-width: 576px) {
    .class-shifts-grid { grid-template-columns: 1fr; }
}

.calendar-legend {
    border-top: 1px solid #dee2e6;
    padding-top: 15px;
}

.legend-item {
    display: inline-block;
    margin-right: 20px;
    font-size: 12px;
}

.legend-color {
    display: inline-block;
    width: 12px;
    height: 12px;
    border-radius: 2px;
    margin-right: 5px;
    vertical-align: middle;
}

@media (max-width: 768px) {
    .calendar-day {
        min-height: 120px;
        padding: 10px;
    }
    .day-number { font-size: 15px; }
    .schedule-preview { font-size: 12px; max-height: 40px; }
    .weekday { padding: 8px 6px; font-size: 12px; }
    .class-list { grid-template-columns: 1fr; }
}

@media print {
    .calendar-header .btn-group,
    .modal-footer {
        display: none !important;
    }
    
    .calendar-container {
        box-shadow: none;
        border: 1px solid #dee2e6;
    }
}
</style>

<div id="schedule-data" data-json="{{ json_encode($getAllTeachingSchedule ?? []) }}" style="display:none"></div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    let currentDate = new Date();
    let currentMonth = currentDate.getMonth();
    let currentYear = currentDate.getFullYear();
    
    // Schedule data from server
    let scheduleData = [];
    try {
        const scheduleDataEl = document.getElementById('schedule-data');
        if (scheduleDataEl && scheduleDataEl.dataset && scheduleDataEl.dataset.json) {
            scheduleData = JSON.parse(scheduleDataEl.dataset.json);
            console.log('Loaded schedule data:', scheduleData);
        } else {
            console.log('No schedule data element found');
        }
    } catch (e) {
        console.error('Failed to parse schedule data', e);
    }
    
    // Auto-navigate to month with schedules
    if (scheduleData.length > 0) {
        const firstSchedule = scheduleData[0];
        if (firstSchedule.schedule_date) {
            const scheduleDate = new Date(firstSchedule.schedule_date);
            currentMonth = scheduleDate.getMonth();
            currentYear = scheduleDate.getFullYear();
        }
    }
    
    // Initialize calendar
    function initCalendar() {
        console.log('Initializing calendar with', scheduleData.length, 'schedules');
        updateMonthYear();
        generateCalendar();
    }
    
    // Update month/year display
    function updateMonthYear() {
        const monthNames = [
            'Tháng 1', 'Tháng 2', 'Tháng 3', 'Tháng 4', 'Tháng 5', 'Tháng 6',
            'Tháng 7', 'Tháng 8', 'Tháng 9', 'Tháng 10', 'Tháng 11', 'Tháng 12'
        ];
        document.getElementById('current-month-year').textContent = 
            monthNames[currentMonth] + ' ' + currentYear;
    }
    
    // Generate calendar grid
    function generateCalendar() {
        const calendarDays = document.getElementById('calendar-days');
        if (!calendarDays) {
            return;
        }
        calendarDays.innerHTML = '';
        
        const firstDay = new Date(currentYear, currentMonth, 1);
        const lastDay = new Date(currentYear, currentMonth + 1, 0);
        const startDate = new Date(firstDay);
        startDate.setDate(startDate.getDate() - firstDay.getDay() + 1); // Start from Monday
        
        const today = new Date();
        const isToday = (date) => {
            return date.toDateString() === today.toDateString();
        };
        
        const isCurrentMonth = (date) => {
            return date.getMonth() === currentMonth && date.getFullYear() === currentYear;
        };
        
        // Generate 42 days (6 weeks)
        for (let i = 0; i < 42; i++) {
            const date = new Date(startDate);
            date.setDate(startDate.getDate() + i);
            
            const dayElement = document.createElement('div');
            dayElement.className = 'calendar-day';
            
            // Add classes based on date properties
            if (!isCurrentMonth(date)) {
                dayElement.classList.add('other-month');
            }
            if (isToday(date)) {
                dayElement.classList.add('today');
            }
            
            // Check for schedules on this date - sử dụng format YYYY-MM-DD trực tiếp
            const dateStr = date.getFullYear() + '-' + 
                String(date.getMonth() + 1).padStart(2, '0') + '-' + 
                String(date.getDate()).padStart(2, '0');
            
            const daySchedules = scheduleData.filter(schedule => {
                if (!schedule.schedule_date) return false;
                // So sánh trực tiếp string YYYY-MM-DD
                return schedule.schedule_date === dateStr;
            });
            
            // Debug: log để kiểm tra
            if (daySchedules.length > 0) {
                console.log('Found schedules for', dateStr, ':', daySchedules);
            }
            
            if (daySchedules.length > 0) {
                dayElement.classList.add('has-schedule');
            }
            
            // Day number
            const dayNumber = document.createElement('div');
            dayNumber.className = 'day-number';
            dayNumber.textContent = date.getDate();
            dayElement.appendChild(dayNumber);
            
            // Schedule count badge
            if (daySchedules.length > 0) {
                const uniqueClassCount = (() => {
                    const set = new Set();
                    daySchedules.forEach(s => { if (s.class_name) set.add(s.class_name); });
                    return set.size;
                })();
                const countBadge = document.createElement('div');
                countBadge.className = 'schedule-count';
                countBadge.textContent = uniqueClassCount;
                dayElement.appendChild(countBadge);
            }
            
            // Show class chips (no shifts)
            if (daySchedules.length > 0) {
                const classMap = new Map();
                daySchedules.forEach(s => {
                    const cls = s.class_name || 'Lớp';
                    if (!classMap.has(cls)) classMap.set(cls, true);
                });
                const tags = document.createElement('div');
                tags.className = 'schedule-tags';
                const entries = Array.from(classMap.keys());
                const maxClasses = 4;
                entries.slice(0, maxClasses).forEach((cls) => {
                    const chip = document.createElement('div');
                    chip.className = 'class-chip';
                    const clsShort = cls.length > 18 ? (cls.slice(0, 18) + '…') : cls;
                    chip.innerHTML = `<i class="fas fa-users"></i><span title="${cls}">${clsShort}</span>`;
                    tags.appendChild(chip);
                });
                if (entries.length > maxClasses) {
                    const more = document.createElement('div');
                    more.className = 'schedule-more';
                    more.textContent = `+${entries.length - maxClasses} lớp khác`;
                    tags.appendChild(more);
                }
                dayElement.appendChild(tags);
            }
            
            // Click event
            dayElement.addEventListener('click', function() {
                showScheduleModal(date, daySchedules);
            });
            
            calendarDays.appendChild(dayElement);
        }
    }
    
    // Show schedule modal
    function showScheduleModal(date, schedules) {
        const modal = document.getElementById('scheduleModal');
        const modalDate = document.getElementById('modal-date');
        const scheduleList = document.getElementById('schedule-list');
        
        // Format date for display
        const dateStr = date.toLocaleDateString('vi-VN', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
        modalDate.textContent = dateStr;
        
        // Clear previous content and reset class count badge
        scheduleList.innerHTML = '';
        const classCountBadge = document.getElementById('modal-class-count');
        if (classCountBadge) {
            const uniqueCount = new Set(schedules.map(s => s.class_name)).size;
            if (uniqueCount > 0) {
                classCountBadge.textContent = `${uniqueCount} lớp`;
                classCountBadge.classList.remove('d-none');
            } else {
                classCountBadge.textContent = '';
                classCountBadge.classList.add('d-none');
            }
        }
        
        if (schedules.length === 0) {
            scheduleList.innerHTML = `
                <div class="text-center text-muted py-4">
                    <i class="fas fa-calendar-times fa-3x mb-3"></i>
                    <p>Không có lịch huấn luyện nào trong ngày này</p>
                </div>
            `;
        } else {
            // Group schedules by class
            const classMap = new Map();
            schedules.forEach(s => {
                const cls = s.class_name || 'Lớp';
                if (!classMap.has(cls)) classMap.set(cls, []);
                classMap.get(cls).push(s);
            });

            // Search input
            const searchWrap = document.createElement('div');
            searchWrap.className = 'mb-3';
            searchWrap.innerHTML = `
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="text" class="form-control" id="classSearchInput" placeholder="Tìm lớp...">
                </div>`;
            scheduleList.appendChild(searchWrap);

            const list = document.createElement('div');
            list.className = 'class-list';
            scheduleList.appendChild(list);

            const entries = Array.from(classMap.entries()).sort((a,b)=> a[0].localeCompare(b[0]));
            const pageSize = 12;
            let shown = 0;

            function renderChunk(reset=false) {
                if (reset) { list.innerHTML=''; shown = 0; }
                const slice = entries.slice(shown, shown + pageSize);
                slice.forEach(([cls, items]) => {
                    const classCard = document.createElement('div');
                    classCard.className = 'class-card';
                    const shifts = [...new Set(items.map(it => it.shift_name || ((it.start_time||'').slice(0,5)+'-'+(it.end_time||'').slice(0,5))))];
                    const shiftChips = shifts.slice(0, 3).map(s => `<span class="shift-chip" title="${s}"><i class=\"fas fa-clock\"></i> ${s}</span>`).join('') + (shifts.length > 3 ? `<span class=\"shift-chip\">+${shifts.length - 3}</span>` : '');
                    classCard.innerHTML = `
                        <div class="class-card-header d-flex justify-content-between align-items-center">
                            <div class="fw-semibold"><i class="fas fa-users me-2"></i>${cls}</div>
                            <div class="shift-chips">${shiftChips}</div>
                        </div>
                        <div class="class-card-actions mt-2">
                            <button type="button" class="btn btn-sm btn-outline-primary btn-view-details">
                                <i class="fas fa-eye"></i> Xem chi tiết
                            </button>
                        </div>
                        <div class="class-card-details mt-2" style="display:none;"></div>`;

                    classCard.querySelector('.btn-view-details').addEventListener('click', function() {
                        const detail = classCard.querySelector('.class-card-details');
                        if (detail.style.display === 'none') {
                            detail.innerHTML = items.map(schedule => {
                                const startTime = schedule.start_time || '';
                                const endTime = schedule.end_time || '';
                                const subjectName = schedule.subject_name || 'N/A';
                                const teacherName = schedule.teacher_name || 'Chưa xác định';
                                const roomName = schedule.room_name || 'N/A';
                                const shiftName = schedule.shift_name || 'N/A';
                                return `
                                    <div class="schedule-item">
                                        <div class="schedule-time"><i class="fas fa-clock"></i> ${startTime} - ${endTime} (${shiftName})</div>
                                        <div class="schedule-subject"><i class="fas fa-book"></i> ${subjectName}</div>
                                        <div class="schedule-teacher"><i class="fas fa-chalkboard-teacher"></i> ${teacherName}</div>
                                        <div class="schedule-room"><i class="fas fa-door-open"></i> Phòng: ${roomName}</div>
                                        <div class="schedule-actions mt-2">
                                            <a href="{{ route('teacher.teaching_schedule.show', '') }}/${schedule.id}" class="btn btn-sm btn-primary">
                                                <i class="fas fa-eye"></i> Xem chi tiết đầy đủ
                                            </a>
                                        </div>
                                    </div>`;
                            }).join('');
                            detail.style.display = '';
                            this.innerHTML = '<i class="fas fa-eye-slash"></i> Ẩn chi tiết';
                        } else {
                            detail.style.display = 'none';
                            this.innerHTML = '<i class="fas fa-eye"></i> Xem chi tiết';
                        }
                    });

                    list.appendChild(classCard);
                });
                shown += slice.length;
                loadMoreBtn.style.display = shown < entries.length ? '' : 'none';
            }

            const loadMoreBtn = document.createElement('button');
            loadMoreBtn.type = 'button';
            loadMoreBtn.className = 'btn btn-outline-secondary w-100 mt-3';
            loadMoreBtn.textContent = 'Hiển thị thêm';
            loadMoreBtn.addEventListener('click', function(){ renderChunk(); });
            scheduleList.appendChild(loadMoreBtn);

            // Tìm kiếm lớp theo tên
            const searchInput = document.getElementById('classSearchInput');
            searchInput.addEventListener('input', function(){
                const q = this.value.trim().toLowerCase();
                if (!q) { renderChunk(true); renderChunk(); return; }
                list.innerHTML='';
                const filtered = entries.filter(([cls]) => cls.toLowerCase().includes(q));
                filtered.slice(0, pageSize).forEach(([cls, items]) => {
                    const classCard = document.createElement('div');
                    classCard.className = 'class-card';
                    const shifts = [...new Set(items.map(it => it.shift_name || ((it.start_time||'').slice(0,5)+'-'+(it.end_time||'').slice(0,5))))];
                    const shiftChips = shifts.slice(0, 3).map(s => `<span class=\"shift-chip\" title=\"${s}\"><i class=\"fas fa-clock\"></i> ${s}</span>`).join('') + (shifts.length > 3 ? `<span class=\"shift-chip\">+${shifts.length - 3}</span>` : '');
                    classCard.innerHTML = `
                        <div class="class-card-header d-flex justify-content-between align-items-center">
                            <div class="fw-semibold"><i class="fas fa-users me-2"></i>${cls}</div>
                            <div class="shift-chips">${shiftChips}</div>
                        </div>
                        <div class="class-card-actions mt-2">
                            <button type="button" class="btn btn-sm btn-outline-primary btn-view-details">
                                <i class="fas fa-eye"></i> Xem chi tiết
                            </button>
                        </div>
                        <div class="class-card-details mt-2" style="display:none;"></div>`;
                    classCard.querySelector('.btn-view-details').addEventListener('click', function() {
                        const detail = classCard.querySelector('.class-card-details');
                        if (detail.style.display === 'none') {
                            detail.innerHTML = classMap.get(cls).map(schedule => {
                                const startTime = schedule.start_time || '';
                                const endTime = schedule.end_time || '';
                                const subjectName = schedule.subject_name || 'N/A';
                                const teacherName = schedule.teacher_name || 'Chưa xác định';
                                const roomName = schedule.room_name || 'N/A';
                                const shiftName = schedule.shift_name || 'N/A';
                                return `
                                    <div class="schedule-item">
                                        <div class="schedule-time"><i class="fas fa-clock"></i> ${startTime} - ${endTime} (${shiftName})</div>
                                        <div class="schedule-subject"><i class="fas fa-book"></i> ${subjectName}</div>
                                        <div class="schedule-teacher"><i class="fas fa-chalkboard-teacher"></i> ${teacherName}</div>
                                        <div class="schedule-room"><i class="fas fa-door-open"></i> Phòng: ${roomName}</div>
                                        <div class="schedule-actions mt-2">
                                            <a href="{{ route('teacher.teaching_schedule.show', '') }}/${schedule.id}" class="btn btn-sm btn-primary">
                                                <i class="fas fa-eye"></i> Xem chi tiết đầy đủ
                                            </a>
                                        </div>
                                    </div>`;
                            }).join('');
                            detail.style.display = '';
                            this.innerHTML = '<i class="fas fa-eye-slash"></i> Ẩn chi tiết';
                        } else {
                            detail.style.display = 'none';
                            this.innerHTML = '<i class="fas fa-eye"></i> Xem chi tiết';
                        }
                    });
                    list.appendChild(classCard);
                });
                loadMoreBtn.style.display = 'none';
            });

            // Initial render
            renderChunk(true);
            renderChunk();
        }
        
        const modalInstance = new bootstrap.Modal(document.getElementById('scheduleModal'));
        modalInstance.show();
    }
    
    // Open class modal with full shift list
    function openClassModal(className, items) {
        const modal = document.getElementById('scheduleClassModal');
        const nameEl = document.getElementById('classModalName');
        const countEl = document.getElementById('classModalCount');
        const listEl = document.getElementById('classShiftsList');
        if (!modal || !nameEl || !listEl) return;

        nameEl.textContent = className || '';
        if (countEl) countEl.textContent = `${items.length} ca`;

        listEl.innerHTML = items.map(schedule => {
            const startTime = schedule.start_time || '';
            const endTime = schedule.end_time || '';
            const subjectName = schedule.subject_name || 'N/A';
            const teacherName = schedule.teacher_name || 'Chưa xác định';
            const roomName = schedule.room_name || 'N/A';
            const shiftName = schedule.shift_name || 'N/A';
            return `
                <div class="shift-card">
                    <div class="shift-header">
                        <div class="shift-title"><i class="fas fa-clock me-2"></i>${startTime} - ${endTime}</div>
                        <div class="shift-badge">${shiftName}</div>
                    </div>
                    <div class="shift-meta mb-1"><i class="fas fa-book me-2"></i>${subjectName}</div>
                    <div class="shift-meta mb-1"><i class="fas fa-chalkboard-teacher me-2"></i>${teacherName}</div>
                    <div class="shift-meta"><i class="fas fa-door-open me-2"></i>Phòng: ${roomName}</div>
                    <div class="shift-actions d-flex flex-wrap gap-2">
                        <a href="{{ route('teacher.teaching_schedule.show', '') }}/${schedule.id}" class="btn btn-sm btn-primary">
                            <i class="fas fa-eye"></i> Xem chi tiết
                        </a>
                    </div>
                </div>`;
        }).join('');

        const classModal = new bootstrap.Modal(modal, {keyboard: true, backdrop: true});
        classModal.show();
    }
    
    // Navigation buttons
    document.getElementById('prev-month').addEventListener('click', function() {
        currentMonth--;
        if (currentMonth < 0) {
            currentMonth = 11;
            currentYear--;
        }
        initCalendar();
    });
    
    document.getElementById('next-month').addEventListener('click', function() {
        currentMonth++;
        if (currentMonth > 11) {
            currentMonth = 0;
            currentYear++;
        }
        initCalendar();
    });
    
    
    // Initialize calendar
    initCalendar();
    
    // Global function to update calendar (for AJAX calls)
    window.updateCalendar = function() {
        // Simple approach: reload the page to get fresh data
        window.location.reload();
    };
    
    // Alternative: Update calendar data without reload
    window.refreshCalendarData = function() {
        // Reload schedule data from server
        fetch('{{ route("teacher.teaching_schedule.index") }}?ajax=1', {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.schedules) {
                // Update schedule data
                scheduleData = data.schedules;
                // Regenerate calendar
                initCalendar();
                
                // Show success message
                if (typeof toastr !== 'undefined') {
                    toastr.success('Lịch đã được cập nhật');
                }
            }
        })
        .catch(error => {
            console.error('Error updating calendar:', error);
            // Fallback to page reload
            window.location.reload();
        });
    };
    
    // Force reinitialize function
    window.forceReinitCalendar = function() {
        initCalendar();
    };
});
</script>
